{"version":3,"sources":["services/champions.js","components/Search.js","services/winRatesService.js","components/ChampionNav.js","components/ChampionList.js","components/CounterList.js","components/IndividualCounters.js","App.js","index.js"],"names":["axios","get","Search","searchText","setSearchText","setDisplayChampions","champions","style","borderRadius","height","width","border","backgroundColor","type","value","onChange","event","target","filteredChampions","filter","champ","name","toLowerCase","startsWith","placeholder","baseUrl","getAll","a","response","data","removeChamp","selectedChampions","setSelectedChampions","currentWinMap","setCurrentWinMap","individualWinMaps","setIndividualWinMaps","updatedChamps","length","winRatesService","championData","championWinMap","winMap","newCurrentWinMap","i","removePercentage","WinRate","championName","oldPercentage","oldTotalPercentage","newPercentage","Games","map","item","updatedIndividualWinMaps","ChampionNav","isTeamCounters","removeChampNav","preventDefault","console","log","champion","className","src","image","alt","onClick","addSelectChampion","championObject","extractChamp","addChamp","championId","addPercentage","newIndividualWinMap","concat","ChampionList","displayChampions","selectedChampNames","updateSelectedChampions","includes","useState","display","setStyle","renderHoverText","champName","info","marginTop","marginLeft","Paper","id","maxHeight","maxWidth","overflow","ImageList","cols","rowHeight","paddingTop","position","ImageListItem","onSubmit","textAlign","onMouseEnter","e","onMouseLeave","CounterList","JSON","parse","stringify","selectedChampionsNames","obj","sort","firstObj","secondObj","TableContainer","paddingLeft","paddingRight","minWidth","component","Table","borderCollapse","TableHead","TableRow","TableCell","class","TableBody","index","scope","float","toFixed","IndividualCounters","winMaps","currentObj","overflowX","overflowY","minHeight","color","fontSize","App","setChampions","setDisplaysChampions","setIsTeamCounters","useEffect","championService","then","document","body","title","parsedSelectChamps","localStorage","getItem","parsedWinMap","parsedIndividualWinMaps","parsedIsTeamCounters","loadSelectChamps","loadWinMap","loadIndividualWinMaps","loadIsTeamCounters","setItem","Button","variant","whiteSpace","left","top","fontFamily","ReactDOM","render","getElementById"],"mappings":"sPAOe,EAJA,WACX,OAAOA,IAAMC,IAHD,mB,+DCqBDC,EApBA,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,WAAYC,EAAoD,EAApDA,cAAeC,EAAqC,EAArCA,oBAAqBC,EAAgB,EAAhBA,UAY9D,OACI,+BACI,uBAAOC,MAAO,CAACC,aAAa,GAAIC,OAAO,GAAIC,MAAM,IAAKC,OAAO,oBAAqBC,gBAAgB,WAClGC,KAAK,OAAOC,MAAOX,EAAYY,SAbf,SAACC,GAErB,GADAZ,EAAcY,EAAMC,OAAOH,OACA,KAAvBE,EAAMC,OAAOH,MAAc,CAC7B,IAAMI,EAAoBZ,EAAUa,QAAO,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,cAAcC,WAAWP,EAAMC,OAAOH,MAAMQ,kBAC3GjB,EAAoBa,QAEpBb,EAAoBC,IAOwCkB,YAAY,wBChB5EC,EAAU,kBAYD,GACXC,OAXQ,uCAAG,4BAAAC,EAAA,sEACY3B,IAAMC,IAAIwB,GADtB,cACLG,EADK,yBAEJA,GAFI,2CAAH,qDAYR3B,IAPK,uCAAG,WAAOmB,GAAP,eAAAO,EAAA,sEACe3B,IAAMC,IAAN,UAAawB,EAAb,YAAwBL,IADvC,cACFQ,EADE,yBAEDA,EAASC,MAFR,2CAAH,uD,yBCFHC,G,MAAW,uCAAG,WAAOd,EAAOe,EAAmBC,EAAsBC,EAAeC,EACxFC,EAAmBC,GADD,mCAAAT,EAAA,yDAEZU,EAAgBN,EAAkBZ,QAAO,SAAAC,GAAK,OAAIA,EAAMC,OAASL,EAAMC,OAAOH,SAEnD,IAA7BiB,EAAkBO,OAJJ,gBAKhBJ,EAAiB,IALD,uCAQSK,EAAgBtC,IAAIe,EAAMC,OAAOH,OAR1C,OAYhB,IAJI0B,EARY,OASZC,EAAiBD,EAAa,GAAGE,OACjCC,EAAmB,GAEdC,EAAI,EAAGA,EAAIH,EAAeH,OAAQM,IAErCC,EAAmBJ,EAAeG,GAAGE,QACrCzB,EAAOoB,EAAeG,GAAGG,aAEzBC,EAAgBf,EAAcW,GAAGE,QAEjCG,EAAqBD,EAAiBjB,EAAkBO,OAExDY,GADqBD,EAAqBJ,IACJd,EAAkBO,OAAS,GACrEK,EAAiBtB,GAAQ,CAACyB,QAASI,EAAeC,MAAOV,EAAeG,GAAGO,OAG7EjB,EAAiBD,EAAcmB,KAAI,SAAAC,GAAI,kCAAOA,GAAP,IAAaP,QAASH,EAAiBU,EAAKN,cAAtB,QACzDI,MAAOE,EAAKF,MAAQR,EAAiBU,EAAKN,cAAtB,YA1BR,QA6BZO,EAA2BnB,EAAkBhB,QAAO,SAAAC,GAAK,OAAIA,EAAM2B,eAAiB/B,EAAMC,OAAOH,SACvGsB,EAAqBkB,GACrBtB,EAAqBK,GA/BH,4CAAH,mEAyDFkB,EArBK,SAAC,GACyB,IADvBxB,EACsB,EADtBA,kBAAmBC,EACG,EADHA,qBAAsBC,EACnB,EADmBA,cAAeC,EAClC,EADkCA,iBAAkBC,EACpD,EADoDA,kBAC/FC,EAA2C,EAA3CA,qBAAsBoB,EAAqB,EAArBA,eAEdC,EAAiB,SAACzC,GACtBA,EAAM0C,iBACN5B,EAAYd,EAAOe,EAAmBC,EAAsBC,EAAeC,EAAkBC,EAC3FC,IAGJ,OADAuB,QAAQC,IAAIJ,GAEV,qBAAKjD,MAAO,CAACG,MAAM,QAAnB,SACGqB,EAAkBqB,KAAI,SAAAS,GAAQ,OAC7B,qBAAKC,UAAS,UAAKN,EAAiB,aAAe,oBAAnD,SACA,uBAAOjD,MAAO,CAACG,MAAM,MAAOD,OAAO,OAAQI,KAAK,QAAQkD,IAA8B,kBAAoBF,EAASG,MACjHC,IAAKJ,EAASxC,KAAM6C,QAAST,EAAgB3C,MAAO+C,EAASxC,eChDnE8C,EAAiB,uCAAG,WAAOnD,EAAOV,EAAWyB,EAAmBC,EAAsBC,EAC1FC,EAAkBC,EAAmBC,GADb,uCAAAT,EAAA,yDAGlByC,EAAiB9D,EAAUa,QAAO,SAAA0C,GAAQ,OAAIA,EAASxC,OAASL,EAAMC,OAAOH,SAC7EuD,EAAeD,EAAe,GAE9BE,EAAW,CAACjD,KAAKgD,EAAahD,KAAM2C,MAAMK,EAAaL,MAAOO,WAAWF,EAAaE,cAI7D,IAFPxC,EAAkBZ,QAAO,SAAAC,GAAK,OAAIA,EAAMC,OAASiD,EAASjD,QAE9DiB,QAAgBP,EAAkBO,OAAS,GAVvC,iCAWGC,EAAgBtC,IAAIqE,EAASjD,MAXhC,OActB,GAHImB,EAXkB,OAYlBC,EAAiBD,EAAa,GAAGE,OAEJ,IAA7BX,EAAkBO,OACpBJ,EAAiBO,QACZ,GAAIV,EAAkBO,OAAS,EAAG,CAEvC,IADIK,EAAmB,GACdC,EAAI,EAAGA,EAAIH,EAAeH,OAAQM,IAErC4B,EAAgB/B,EAAeG,GAAGE,QAClCzB,EAAOoB,EAAeG,GAAGG,aAEzBC,EAAgBf,EAAcW,GAAGE,QAEjCG,EAAqBD,EAAiBjB,EAAkBO,OAExDY,GADqBD,EAAqBuB,IACJzC,EAAkBO,OAAS,GACrEK,EAAiBtB,GAAQ,CAACyB,QAAQI,EAAeC,MAAMV,EAAeG,GAAGO,OAE3EjB,EAAiBD,EAAcmB,KAAI,SAAAC,GAAI,kCAAOA,GAAP,IAAaP,QAASH,EAAiBU,EAAKN,cAAtB,QAC3DI,MAAOR,EAAiBU,EAAKN,cAAtB,MAA+CM,EAAKF,YAI3DsB,EAAsB,CAAC1B,aAAauB,EAASjD,KAAMqB,OAAOD,GAC9DL,EAAqBD,EAAkBuC,OAAOD,IAE9CzC,EAAqBD,EAAkB2C,OAAOJ,IAtCxB,4CAAH,oEA8HRK,EAnFM,SAAC,GAC4G,IAD1GrE,EACyG,EADzGA,UAAWsE,EAC8F,EAD9FA,iBAAkB7C,EAC4E,EAD5EA,kBAAmBC,EACyD,EADzDA,qBACtEE,EAA+H,EAA/HA,iBAAkBD,EAA6G,EAA7GA,cAAe9B,EAA8F,EAA9FA,WAAYC,EAAkF,EAAlFA,cAAeC,EAAmE,EAAnEA,oBAAqB8B,EAA8C,EAA9CA,kBAAmBC,EAA2B,EAA3BA,qBAE9FyC,EAAqB9C,EAAkBqB,KAAI,SAAAhC,GAAK,OAAIA,EAAMC,QAE1DyD,EAA0B,SAAC9D,GAC/BA,EAAM0C,iBACFmB,EAAmBE,SAAS/D,EAAMC,OAAOH,OAC3CgB,EAAYd,EAAOe,EAAmBC,EAAsBC,EAAeC,EAAkBC,EAC3FC,GAEF+B,EAAkBnD,EAAOV,EAAWyB,EAAmBC,EAAsBC,EAAeC,EAC1FC,EAAmBC,IAIzB,EAA0B4C,mBAAS,CAACzE,MAAO,CAAC0E,QAAQ,QAAS7D,MAAM,KAAnE,mBAAOb,EAAP,KAAc2E,EAAd,KAUMC,EAAkB,SAACC,GACvB,IAAIC,EAAO,GAQX,OALEA,EADER,EAAmBE,SAASK,GACvB,SAEA,YAIP,qBAAKtB,UAAU,mBAAmBvD,MAAOA,EAAzC,SACG8E,KAKP,OACE,sBAAK9E,MAAO,CAAC+E,UAAU,IAAKC,WAAW,KAAvC,UACI,cAAC,EAAD,CAAQpF,WAAYA,EAAYC,cAAeA,EAAeC,oBAAqBA,EACjFC,UAAWA,IACf,cAACkF,EAAA,EAAD,CAAOC,GAAG,UAAUlF,MAAO,CAAEmF,UAAW,IAAKC,SAAS,IAAKC,SAAU,OACnEhF,gBAAgB,UAAWJ,aAAc,IAD3C,SAEA,cAACqF,EAAA,EAAD,CAAWC,KAAM,EAAGC,UAAW,GAAIxF,MAAO,CAACyF,WAAW,GAAIC,SAAS,UAAnE,SACGrB,EAAiBxB,KAAI,SAAAS,GAAQ,OAC5B,cAACqC,EAAA,EAAD,UACE,sBAAMC,SAAUrB,EAAhB,SAEE,sBAAKhB,UAAS,0BAAqBe,EAAmBE,SAASlB,EAASxC,MAAQ,wBAA0B,IAEtGd,MAAO,CAAC0F,SAAS,WAAYG,UAAU,SAAUb,WAAW,IAC5Dc,aAAc,SAAAC,GACZpB,EAAS,CAAC3E,MAAO,CAAC0E,QAAQ,SAAU7D,MAAMyC,EAASxC,QAEnDkF,aAAc,SAAAD,GACdpB,EAAS,CAAC3E,MAAO,CAAC0E,QAAQ,QAAS7D,MAAM,MAP/C,UAWA,uBAAOb,MAAO,CAACG,MAAM,OAAQD,OAAO,QAClCI,KAAK,QAAQkD,IAA8B,kBAAoBF,EAASG,MACpEC,IAAKJ,EAASxC,KAAMP,MAAO+C,EAASxC,KAAM6C,QAASY,IAGpDvE,EAAMa,QAAUyC,EAASxC,KAAO8D,EAAgBtB,EAASxC,OAnDjD+D,EAmDyEvB,EAASxC,KAjDvG,qBAAKyC,UAAU,mBAAmBvD,MAAOA,EAAzC,SACG6E,WA6BqBvB,EAASxC,MAhCb,IAAC+D,a,kDCDZoB,EAzDK,SAAC,GAAyC,IAAvCvE,EAAsC,EAAtCA,cAAeF,EAAuB,EAAvBA,kBAG9BW,EAAS+D,KAAKC,MAAMD,KAAKE,UAAU1E,IACjC2E,EAAyB7E,EAAkBqB,KAAI,SAAAhC,GAAK,OAAIA,EAAMC,QAMpE,OALAqB,EAASA,EAAOvB,QAAO,SAAA0F,GAAG,OAAKD,EAAuB7B,SAAS8B,EAAI9D,kBAE5DK,KAAI,SAAAyD,GAAG,OAAIA,EAAI/D,QAAU,IAAM+D,EAAI/D,WAC1CJ,EAAOoE,MAAK,SAACC,EAAUC,GAAX,OAAyBA,EAAUlE,QAAUiE,EAASjE,WAGhE,cAACmE,EAAA,EAAD,CAAgB1G,MAAO,CAAEG,MAAM,OAAQE,gBAAgB,UAAWsG,YAAY,MAAOC,aAAa,MAAOvB,SAAS,OAC9GF,UAAU,IAAKC,SAAS,IAAKyB,SAAS,IAAKnB,SAAS,WAAYzF,aAAa,IAC/E6G,UAAW7B,IAAOC,GAAG,UAFvB,SAGE,eAAC6B,EAAA,EAAD,CAAO/G,MAAO,CAACgH,eAAe,YAA9B,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,MAAM,wBAAjB,sBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,wBAAjB,qBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,wBAAjB,wBAGJ,cAACC,EAAA,EAAD,UACGlF,EAAOU,KAAI,SAAChC,EAAOyG,GAAR,OACV,eAACJ,EAAA,EAAD,CAAU3D,UAAS,UAAK+D,EAAQ,IAAM,EAAI,GAAK,UAA/C,UACE,cAACH,EAAA,EAAD,CAAWC,MAAM,sBACjBpH,MAAO,CAACyF,WAAW,KAAMkB,YAAY,MAAOjC,QAAQ,gBAAiBoC,UAAU,KAAKS,MAAM,MAD1F,SAEE,sBAAKvH,MAAO,CAAC0F,SAAS,YAAtB,UACE,qBAAK1F,MAAO,CAAEG,MAAM,MAAOD,OAAO,MAAOsH,MAAM,QACjDhE,IAA8B,kBAAoB3C,EAAM2B,aAAe,SACrE,mBAAGxC,MAAO,CAAC0F,SAAS,WAAYV,WAAW,OAA3C,SAAoDnE,EAAM2B,oBAI9D,cAAC2E,EAAA,EAAD,CAAWC,MAAM,sBAAsBpH,MAAO,CAAC6F,UAAU,UAAzD,SAAqEhF,EAAM0B,QAAQkF,QAAQ,KAC3F,cAACN,EAAA,EAAD,CAAWC,MAAM,sBAAsBpH,MAAO,CAAC6F,UAAU,UAAzD,SAAqEhF,EAAM+B,UAXb/B,EAAM2B,yBCkBrEkF,EAjDY,SAAC,GAExB,IAFmD,IAAzB9F,EAAwB,EAAxBA,kBACtB+F,EAAUzB,KAAKC,MAAMD,KAAKE,UAAUxE,IADU,WAEzCS,GACL,IAAIiE,EAAMqB,EAAQtF,GACdF,EAASmE,EAAInE,OACbK,EAAe8D,EAAI9D,cAEvBL,EAASA,EAAOvB,QAAO,SAAAgH,GAAU,OAAIA,EAAWpF,cAAgBA,MACzDK,KAAI,SAAAyD,GAAG,OAAIA,EAAI/D,QAAU,IAAM+D,EAAI/D,WAC1CJ,EAAOoE,MAAK,SAACC,EAAUC,GAAX,OAAyBA,EAAUlE,QAAUiE,EAASjE,WAClEoF,EAAQtF,GAAGF,OAASA,GARfE,EAAI,EAAGA,EAAIsF,EAAQ5F,OAAQM,IAAM,EAAjCA,GAYT,OAFAe,QAAQC,IAAIsE,GAGR,qBAAK3H,MAAO,CAAC6G,SAAS,OAAQzB,SAAS,QAAvC,SACKuC,EAAQ9E,KAAI,SAAAA,GAAG,OACR,uBAAO7C,MAAO,CAACwH,MAAM,OAAQpH,OAAO,kBAAmBC,gBAAgB,UAC5EJ,aAAa,IADR,SAED,qBAAKiF,GAAG,UAAUlF,MAAO,CAAC6H,UAAU,SAAUC,UAAU,SAAWC,UAAU,IAAK5C,UAAU,IAAKC,SAAS,IAAKyB,SAAS,KAAxH,SAEEhE,EAAIV,OAAOU,KAAI,SAAChC,EAAOyG,GAAR,OACZ,6BAEI,qBAAK/D,UAAS,UAAK+D,EAAQ,IAAM,EAAI,GAAK,UAAYtH,MAAO,CAACG,MAAM,QAApE,SACA,oBAAIH,MAAO,CAAC0E,QAAQ,eAAgBxE,OAAO,OAAQC,MAAM,QAAzD,SACI,gCACA,qBAAKH,MAAO,CAACG,MAAM,MAAOD,OAAO,MAAOsH,MAAM,QAC9ChE,IAA8B,kBAAoB3C,EAAM2B,aAAe,SACvE,qBAAKxC,MAAO,CAACgI,MAAM,UAAWC,SAAS,OACvCvC,SAAS,WAAYV,WAAW,MAAOS,WAAW,MADlD,SAC0D5E,EAAM2B,qCCmJjF0F,EAzJH,WACV,MAAkCzD,mBAAS,IAA3C,mBAAO1E,EAAP,KAAkBoI,EAAlB,KACA,EAAiD1D,mBAAS,IAA1D,mBAAOJ,EAAP,KAAyB+D,EAAzB,KACA,EAAoC3D,mBAAS,IAA7C,mBAAO7E,EAAP,KAAmBC,EAAnB,KACA,EAAkD4E,mBAAS,IAA3D,mBAAOjD,EAAP,KAA0BC,EAA1B,KACA,EAA0CgD,mBAAS,IAAnD,mBAAO/C,EAAP,KAAsBC,EAAtB,KACA,EAA4C8C,oBAAS,GAArD,mBAAOxB,EAAP,KAAuBoF,EAAvB,KACA,EAAkD5D,mBAAS,IAA3D,mBAAO7C,EAAP,KAA0BC,EAA1B,KAEAyG,qBAAU,WACRC,IAAyBC,MAAK,SAAAnH,GAAQ,OAAI8G,EAAa9G,EAASC,WAC/D,IAEHgH,qBAAU,WACRF,EAAqBrI,KACpB,CAACA,IAEJuI,qBAAU,WAERG,SAASC,KAAK1I,MAAMK,gBAAkB,UACtCoI,SAASE,MAAQ,0BAChB,IAEHL,qBAAU,WACR,IAAMM,EAAqBC,aAAaC,QAAQ,qBAC1CC,EAAeF,aAAaC,QAAQ,iBACpCE,EAA0BH,aAAaC,QAAQ,qBAC/CG,EAAuBJ,aAAaC,QAAQ,kBAGlD,GAA2B,OAAvBF,GAA+BA,EAAoB,CACrDxF,QAAQC,IAAI,iCACZ,IAAM6F,EAAmBhD,KAAKC,MAAMyC,GACpCnH,EAAqByH,GAEvB,GAAqB,OAAjBH,GAAyBA,EAAc,CACzC3F,QAAQC,IAAI,mBACZ,IAAM8F,EAAajD,KAAKC,MAAM4C,GAC9BpH,EAAiBwH,GAEnB,GAAgC,OAA5BH,GAAoCA,EAAwB,CAC9D5F,QAAQC,IAAI,+BACZ,IAAM+F,EAAwBlD,KAAKC,MAAM6C,GACzCnH,EAAqBuH,GAEvB,GAAIH,EAAsB,CACxB7F,QAAQC,IAAI,gBACZ,IAAMgG,EAAqBnD,KAAKC,MAAM8C,GACtCZ,EAAkBgB,MAEnB,IAEHf,qBAAU,WACRO,aAAaS,QAAQ,oBAAqBpD,KAAKE,UAAU5E,MACxD,CAACA,IAEJ8G,qBAAU,WACRO,aAAaS,QAAQ,gBAAiBpD,KAAKE,UAAU1E,MACpD,CAACA,IAEJ4G,qBAAU,WACRO,aAAaS,QAAQ,oBAAqBpD,KAAKE,UAAUxE,MACxD,CAACA,IAEJ0G,qBAAU,WACRO,aAAaS,QAAQ,iBAAkBpD,KAAKE,UAAUnD,MACrD,CAACA,IAiDJ,OACE,sBAAKjD,MAAO,CAAEwH,MAAM,OAAQ9B,SAAS,YAArC,UACE,qBAAK1F,MAAO,CAAEwH,MAAM,OAAQ/B,WAAW,GAAIkB,YAAY,KAAvD,SACE,cAAC,EAAD,CAAc5G,UAAWA,EAAWyB,kBAAmBA,EAAmBC,qBAAsBA,EAC9FE,iBAAkBA,EAAkBD,cAAeA,EAAe2C,iBAAkBA,EACpFzE,WAAYA,EAAYC,cAAeA,EAAeC,oBAAqBsI,EAC3ExG,kBAAmBA,EAAmBC,qBAAsBA,MAIhE,sBAAK7B,MAAO,CAACwH,MAAM,OAAQb,YAAY,GAAIlB,WAAW,IAAtD,UACE,gCACE,cAAC8D,EAAA,EAAD,CAAQC,QAAQ,YAAYxB,MAAM,UAAUrE,QA3DvB,WAC3BlC,EAAqB,IACrBE,EAAiB,IACjBE,EAAqB,KAyDT7B,MAAO,CAACG,MAAM,OAAQD,OAAO,OAAQuJ,WAAW,SAAU/E,QAAQ,gBADxE,uBAIE,cAAC6E,EAAA,EAAD,CAAQC,QAAQ,YAAYxB,MAAM,UAAUrE,QAzDnC,WACjB0E,GAAmBpF,IAyDPjD,MAAO,CAACG,MAAM,OAAQD,OAAO,OAAQuJ,WAAW,SAAU/E,QAAQ,eAAiBM,WAAW,IADlG,SAEO/B,EAAiB,4BAA6B,4BAIzD,qBAAKjD,MAAO,CAAC+E,UAAU,GAAI8B,SAAS,IAAKzB,SAAS,KAAlD,SACG5D,EAAkBO,OAAS,EAAI,cAAC,EAAD,CAAaP,kBAAmBA,EAAmBC,qBAAsBA,EACrGC,cAAeA,EAAeC,iBAAkBA,EAAkBC,kBAAmBA,EACrFC,qBAAsBA,EAAsBoB,eAAgBA,IAnDpE,qBAAKjD,MAAO,CAAC0F,SAAS,WAAYgE,KAAK,IAAKC,IAAI,KAAhD,SACE,sBAAK3J,MAAO,CAACgI,MAAM,UAAW4B,WAAW,UAAzC,UACE,qBAAK5J,MAAO,CAAC4J,WAAW,UAAxB,mLAOA,kDAEA,qBAAK5J,MAAO,CAAC4J,WAAW,UAAxB,oUA2CF,qBAAK5J,MAAO,CAAC6G,SAAS,IAAKzB,SAAS,IAAKL,UAAU,IAAnD,SACGrD,EAAcK,OAAS,EAhE5B,8BACGkB,EAAiB,cAAC,EAAD,CAAavB,cAAeA,EAAeF,kBAAmBA,IAC9E,cAAC,EAAD,CAAoBI,kBAAmBA,MA8DO,YCvKxDiI,IAASC,OACP,cAAC,EAAD,IACArB,SAASsB,eAAe,W","file":"static/js/main.79aa266b.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/champions'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nexport default {\n    getAll: getAll\n}","import React from 'react'\n\nconst Search = ({ searchText, setSearchText, setDisplayChampions, champions }) => {\n\n    const filterChampions = (event) => {\n        setSearchText(event.target.value)\n        if (event.target.value !== '') {\n          const filteredChampions = champions.filter(champ => champ.name.toLowerCase().startsWith(event.target.value.toLowerCase()))\n          setDisplayChampions(filteredChampions)\n        } else {\n          setDisplayChampions(champions)\n        }\n      }\n\n    return (\n        <form>\n            <input style={{borderRadius:10, height:25, width:200, border:'4px solid #4F485D', backgroundColor:'#2A1355'}} \n            type='text' value={searchText} onChange={filterChampions} placeholder='Search Champions'></input>\n        </form> \n    )\n}\n\nexport default Search","import axios from 'axios'\nconst baseUrl = '/api/statistics'\n\nconst getAll = async () => {\n    const response = await axios.get(baseUrl)\n    return response\n}\n\nconst get = async (champ) => {\n    const response = await axios.get(`${baseUrl}/${champ}`)\n    return response.data\n}\n\nexport default {\n    getAll: getAll,\n    get: get\n}","import View from 'react-flexbox'\nimport React from 'react'\nimport winRatesService from '../services/winRatesService'\nimport '../css/hover.css'\nimport '../css/myClasses.css'\n\nconst removeChamp = async (event, selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap, \n  individualWinMaps, setIndividualWinMaps) => {\n  const updatedChamps = selectedChampions.filter(champ => champ.name !== event.target.value)\n\n  if (selectedChampions.length === 1) {\n    setCurrentWinMap([])\n  }\n  else {\n    let championData = await winRatesService.get(event.target.value)\n    let championWinMap = championData[0].winMap\n    let newCurrentWinMap = {}\n\n    for (let i = 0; i < championWinMap.length; i++) {\n      // for champion being added\n      let removePercentage = championWinMap[i].WinRate\n      let name = championWinMap[i].championName\n      // for champions already added before\n      let oldPercentage = currentWinMap[i].WinRate\n      \n      let oldTotalPercentage = oldPercentage * (selectedChampions.length)\n      let newTotalPercentage = oldTotalPercentage - removePercentage\n      let newPercentage = newTotalPercentage / (selectedChampions.length - 1)\n      newCurrentWinMap[name] = {WinRate: newPercentage, Games: championWinMap[i].Games}\n      \n    }\n    setCurrentWinMap(currentWinMap.map(item=>({...item, WinRate: newCurrentWinMap[item.championName]['WinRate'],\n        Games: item.Games - newCurrentWinMap[item.championName]['Games']\n      })))\n  }\n  const updatedIndividualWinMaps = individualWinMaps.filter(champ => champ.championName !== event.target.value)\n  setIndividualWinMaps(updatedIndividualWinMaps)\n  setSelectedChampions(updatedChamps)\n}\n\n\n\nconst ChampionNav = ( {selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap, individualWinMaps, \n  setIndividualWinMaps, isTeamCounters} ) => {\n  \n    const removeChampNav = (event) => {\n      event.preventDefault()\n      removeChamp(event, selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap, individualWinMaps, \n        setIndividualWinMaps)\n    }\n    console.log(isTeamCounters)\n    return (\n      <div style={{width:'500%'}}>\n        {selectedChampions.map(champion =>\n          <div className={`${isTeamCounters ? 'navForTeam' : 'navForIndividual'}`}>\n          <input style={{width:'50%', height:'50%'}} type=\"image\" src={process.env.PUBLIC_URL + '/assets/images/' + champion.image}\n            alt={champion.name} onClick={removeChampNav} value={champion.name}\n            /></div>\n             )}\n      </div>\n    )\n  }\n\nexport default ChampionNav\nexport { removeChamp }","import React, {useState} from 'react'\nimport Search from './Search'\nimport winRatesService from '../services/winRatesService'\nimport { Paper, ImageList, ImageListItem } from '@material-ui/core'\nimport { removeChamp } from './ChampionNav'\nimport '../css/hover.css'\nimport '../css/myClasses.css'\n\nconst addSelectChampion = async (event, champions, selectedChampions, setSelectedChampions, currentWinMap, \n  setCurrentWinMap, individualWinMaps, setIndividualWinMaps) => {\n  // looking for clicked champ in all champions state\n  const championObject = champions.filter(champion => champion.name === event.target.value)\n  const extractChamp = championObject[0]\n  // create object for it\n  const addChamp = {name:extractChamp.name, image:extractChamp.image, championId:extractChamp.championId}\n  // checking it hasn't been selected before and adding it to selectedChamps if not.\n  const alreadySelected = selectedChampions.filter(champ => champ.name === addChamp.name)\n  \n  if (alreadySelected.length === 0 && selectedChampions.length < 5){\n    let championData = await winRatesService.get(addChamp.name)\n    let championWinMap = championData[0].winMap\n\n    if (selectedChampions.length === 0){\n      setCurrentWinMap(championWinMap)\n    } else if (selectedChampions.length > 0) {\n      let newCurrentWinMap = {}\n      for (let i = 0; i < championWinMap.length; i++) {\n        // for champion being added\n        let addPercentage = championWinMap[i].WinRate\n        let name = championWinMap[i].championName\n        // for champions already added before\n        let oldPercentage = currentWinMap[i].WinRate\n        \n        let oldTotalPercentage = oldPercentage * (selectedChampions.length)\n        let newTotalPercentage = oldTotalPercentage + addPercentage\n        let newPercentage = newTotalPercentage / (selectedChampions.length + 1)\n        newCurrentWinMap[name] = {WinRate:newPercentage, Games:championWinMap[i].Games}\n      }\n      setCurrentWinMap(currentWinMap.map(item=>({...item, WinRate: newCurrentWinMap[item.championName]['WinRate'], \n        Games: newCurrentWinMap[item.championName]['Games'] + item.Games\n        })))\n    }\n    \n    let newIndividualWinMap = {championName:addChamp.name, winMap:championWinMap}\n    setIndividualWinMaps(individualWinMaps.concat(newIndividualWinMap))\n\n    setSelectedChampions(selectedChampions.concat(addChamp))\n  }\n}\n\n\nconst ChampionList = ( {champions, displayChampions, selectedChampions, setSelectedChampions, \n  setCurrentWinMap, currentWinMap, searchText, setSearchText, setDisplayChampions, individualWinMaps, setIndividualWinMaps} ) => {\n  \n  const selectedChampNames = selectedChampions.map(champ => champ.name)\n\n  const updateSelectedChampions = (event) => {\n    event.preventDefault()\n    if (selectedChampNames.includes(event.target.value)) {\n      removeChamp(event, selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap, individualWinMaps, \n        setIndividualWinMaps)\n    } else {\n      addSelectChampion(event, champions, selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap, \n        individualWinMaps, setIndividualWinMaps)\n    }\n  }\n\n  const [style, setStyle] = useState({style: {display:'none'}, champ:''});\n\n  const renderChampName = (champName) => {\n    return (\n      <div className='championListName' style={style}>\n        {champName}\n      </div>\n    )\n  }\n\n  const renderHoverText = (champName) => {\n    let info = ''      \n \n    if (selectedChampNames.includes(champName)) {\n      info = 'Remove'\n    } else {\n      info = 'Add Enemy'\n    }\n\n    return (\n      <div className='championListName' style={style}>\n        {info}\n      </div>\n    )\n  }\n\n  return (\n    <div style={{marginTop:100, marginLeft:100}}>\n        <Search searchText={searchText} setSearchText={setSearchText} setDisplayChampions={setDisplayChampions} \n          champions={champions}/>\n      <Paper id='style-1' style={{ maxHeight: 800, maxWidth:200, overflow: 'auto',\n        backgroundColor:'#130E1F', borderRadius: 20}}>\n      <ImageList cols={1} rowHeight={90} style={{paddingTop:10, position:'center'}}>  \n        {displayChampions.map(champion =>\n          <ImageListItem key={champion.name} >\n            <form onSubmit={updateSelectedChampions} >\n\n              <div className={`hvr-grow-shadow ${selectedChampNames.includes(champion.name) ? 'opacitySelectedChamps' : ''}`}\n                \n                  style={{position:'relative', textAlign:'center', marginLeft:40}}\n                  onMouseEnter={e => {\n                    setStyle({style: {display:'block'}, champ:champion.name});\n                    }}\n                    onMouseLeave={e => {\n                    setStyle({style: {display:'none'}, champ:''})\n                    }}\n              >\n\n              <input style={{width:'auto', height:'auto'}}\n                type='image' src={process.env.PUBLIC_URL + '/assets/images/' + champion.image} \n                    alt={champion.name} value={champion.name} onClick={updateSelectedChampions}\n                     />\n                    \n                  {style.champ === champion.name ? renderHoverText(champion.name) : renderChampName(champion.name)}\n              </div>\n            </form>\n\n          </ImageListItem>\n        )}\n      </ImageList>\n\n    </Paper>\n    </div>\n  )\n\n}\n\nexport default ChampionList","import React from 'react'\nimport { Paper, ImageList, ImageListItem } from '@material-ui/core'\nimport '../css/hover.css'\nimport '../css/myClasses.css'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst CounterList = ( {currentWinMap, selectedChampions}) => {  \n    //let winMap = currentWinMap\n    //const championsToDisplay = []\n    let winMap = JSON.parse(JSON.stringify(currentWinMap))\n    const selectedChampionsNames = selectedChampions.map(champ => champ.name)\n    winMap = winMap.filter(obj => !selectedChampionsNames.includes(obj.championName))\n    // gives loss rate against champs. so our selected champs display champs with lowest winrate. not sure about this tho.\n    winMap.map(obj => obj.WinRate = 100 - obj.WinRate)\n    winMap.sort((firstObj, secondObj) => secondObj.WinRate - firstObj.WinRate)\n\n    return (\n      <TableContainer style={{ width:'100%', backgroundColor:'#28252F', paddingLeft:'10%', paddingRight:'10%', overflow:'auto', \n          maxHeight:800, maxWidth:800, minWidth:500, position:'relative', borderRadius:10 }}\n        component={Paper} id='style-1'>\n        <Table style={{borderCollapse:'collapse'}}>\n          <TableHead>\n            <TableRow>\n              <TableCell class='counterListHeaderText'>Champion</TableCell>\n              <TableCell class='counterListHeaderText'>WinRate</TableCell>\n              <TableCell class='counterListHeaderText'>Games</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {winMap.map((champ, index) => (\n              <TableRow className={`${index % 2 === 0 ? '' : 'oddRow'}`} key={champ.championName}>\n                <TableCell class='counterListCellText'\n                style={{paddingTop:'4%', paddingLeft:'30%', display:'inline-block'}} component=\"th\" scope=\"row\">\n                  <div style={{position:'absolute'}}>\n                    <img style={{ width:'25%', height:'20%', float:'left'}} \n                  src={process.env.PUBLIC_URL + '/assets/images/' + champ.championName + '.png'}></img>\n                    <p style={{position:'absolute', marginLeft:'30%'}}>{champ.championName}</p>\n                  </div>\n\n                </TableCell>\n                <TableCell class='counterListCellText' style={{textAlign:'center'}}>{champ.WinRate.toFixed(1)}</TableCell>\n                <TableCell class='counterListCellText' style={{textAlign:'center'}}>{champ.Games}</TableCell>\n\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n\n    /**\n     *       <Paper id='style-1' style={{ maxHeight: 800, maxWidth: 200, overflow: 'auto', marginTop:100, marginLeft:100, backgroundColor:'transparent'}}>\n        <ImageList cols={1} rowHeight={150}>\n          {winMap.map(champion =>\n            <div key={champion.championName}>\n              <img src={process.env.PUBLIC_URL + '/assets/images/' + champion.championName + '.png'}></img>\n            </div>\n            )}\n        </ImageList>\n      </Paper>\n     */\n  }\n\nexport default CounterList","import React from 'react'\nimport '../css/hover.css'\nimport '../css/myClasses.css'\n\nconst IndividualCounters = ( {individualWinMaps} ) => {\n    let winMaps = JSON.parse(JSON.stringify(individualWinMaps))\n    for (let i = 0; i < winMaps.length; i++) {\n        let obj = winMaps[i]\n        let winMap = obj.winMap\n        let championName = obj.championName\n        \n        winMap = winMap.filter(currentObj => currentObj.championName != championName)\n        winMap.map(obj => obj.WinRate = 100 - obj.WinRate)\n        winMap.sort((firstObj, secondObj) => secondObj.WinRate - firstObj.WinRate)\n        winMaps[i].winMap = winMap\n    }\n    console.log(winMaps)\n\n    return (\n        <div style={{minWidth:'400%', maxWidth:'400%'}}>\n            {winMaps.map(map =>\n                    <table style={{float:'left', border:'1px solid black', backgroundColor:'#28252F', \n               borderRadius:10}}>\n                   <div id='style-1' style={{overflowX:'hidden', overflowY:'scroll',  minHeight:800, maxHeight:800, maxWidth:150, minWidth:150}}>\n\n                    {map.winMap.map((champ, index) =>\n                        <tr>\n                       \n                            <div className={`${index % 2 === 0 ? '' : 'oddRow'}`} style={{width:'200%'}}>\n                            <td style={{display:'inline-block', height:'auto', width:'auto'}}>\n                                <div>\n                                <img style={{width:'25%', height:'20%', float:'left'}}\n                                src={process.env.PUBLIC_URL + '/assets/images/' + champ.championName + '.png'}></img>\n                                <div style={{color:'#bda7da', fontSize:'12px', \n                                position:'relative', marginLeft:'30%', paddingTop:'5%'}}>{champ.championName}</div>\n                                </div>\n                            </td>\n\n                            \n                            </div>\n\n                        </tr>\n                        )}\n                        </div>\n                </table>\n\n            )}\n                \n        </div>\n\n    )\n}\n\nexport default IndividualCounters","import React, { useState, useEffect } from 'react'\nimport championService from './services/champions'\nimport { Button } from '@material-ui/core'\nimport './css/hover.css'\nimport './css/myClasses.css'\nimport ChampionList from './components/ChampionList'\nimport ChampionNav from './components/ChampionNav'\nimport CounterList from './components/CounterList'\nimport IndividualCounters from './components/IndividualCounters'\n\n// following are from : https://riot-api-libraries.readthedocs.io/en/latest/collectingdata.html\n// users: https://canisback.com/leagueId/\n// MATCHIDS: https://canisback.com/matchId/\n//TO DO:\n// add hover options for select champions\n// u have got the winrate completely opposite. maybe calculate loss rate instead. or u can just do 100 - winrate and sort by that\n// add sorting options to counter table\n// reduce spacing between counter list items\n// make counter list a table like the tier list on u.gg\n// sort by skill level\n// make it look nicer\n// make it mobile friendly\n// option for using player stats for counter recommandations\n// option for doing combinined counters or individual counters\n// figuring out how to work around counters for a champ at different lanes\n\n/** why does every champion have a number in front of it */\n\nconst App = () => { \n  const [champions, setChampions] = useState([])\n  const [displayChampions, setDisplaysChampions] = useState([])\n  const [searchText, setSearchText] = useState('')\n  const [selectedChampions, setSelectedChampions] = useState([])\n  const [currentWinMap, setCurrentWinMap] = useState([])\n  const [isTeamCounters, setIsTeamCounters] = useState(true)\n  const [individualWinMaps, setIndividualWinMaps] = useState([])\n\n  useEffect(() => {\n    championService.getAll().then(response => setChampions(response.data))\n  }, [])\n\n  useEffect(() => {\n    setDisplaysChampions(champions)\n  }, [champions])\n\n  useEffect(() => {\n    // possible new color: 1b1625, 1b1625\n    document.body.style.backgroundColor = '#1b1625'\n    document.title = 'League Counter Picker'\n  }, [])\n\n  useEffect(() => {\n    const parsedSelectChamps = localStorage.getItem(\"selectedChampions\")\n    const parsedWinMap = localStorage.getItem(\"currentWinMap\")\n    const parsedIndividualWinMaps = localStorage.getItem(\"individualWinMaps\")\n    const parsedIsTeamCounters = localStorage.getItem(\"isTeamCounters\")\n\n    // since its stored as a string and when its empty, its just an empty string as []. \n    if (parsedSelectChamps !== '[]' && parsedSelectChamps) {\n      console.log('loading saved selected champs')\n      const loadSelectChamps = JSON.parse(parsedSelectChamps)\n      setSelectedChampions(loadSelectChamps)\n    }\n    if (parsedWinMap !== '[]' && parsedWinMap) {\n      console.log('loading win map')\n      const loadWinMap = JSON.parse(parsedWinMap)\n      setCurrentWinMap(loadWinMap)\n    }\n    if (parsedIndividualWinMaps !== '[]' && parsedIndividualWinMaps){\n      console.log('loading individual win maps')\n      const loadIndividualWinMaps = JSON.parse(parsedIndividualWinMaps)\n      setIndividualWinMaps(loadIndividualWinMaps)\n    }\n    if (parsedIsTeamCounters) {\n      console.log('setting mode')\n      const loadIsTeamCounters = JSON.parse(parsedIsTeamCounters)\n      setIsTeamCounters(loadIsTeamCounters)\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(\"selectedChampions\", JSON.stringify(selectedChampions))\n  }, [selectedChampions])\n\n  useEffect(() => {\n    localStorage.setItem(\"currentWinMap\", JSON.stringify(currentWinMap))\n  }, [currentWinMap])\n\n  useEffect(() => {\n    localStorage.setItem(\"individualWinMaps\", JSON.stringify(individualWinMaps))\n  }, [individualWinMaps])\n\n  useEffect(() => {\n    localStorage.setItem(\"isTeamCounters\", JSON.stringify(isTeamCounters))\n  }, [isTeamCounters])\n\n  const clearSelectChampions = () => {\n    setSelectedChampions([])\n    setCurrentWinMap([])\n    setIndividualWinMaps([])\n  }\n  \n  const changeMode = () => {\n    setIsTeamCounters(!isTeamCounters)\n  }\n\n  const renderCounters = () => {\n    return (\n      <div>\n        {isTeamCounters ? <CounterList currentWinMap={currentWinMap} selectedChampions={selectedChampions}/> : \n          <IndividualCounters individualWinMaps={individualWinMaps}/>}\n      </div>\n    )\n  }\n  \n  const renderInstructions = () => {\n    return (\n      <div style={{position:'absolute', left:550, top:100 }}>\n        <div style={{color:'#c1b4d8', fontFamily:'Avenir'}}>\n          <pre style={{fontFamily:'Avenir'}}>{`\n  Choose enemy champions from the list on the left. \n\n  You can remove champions either from the main list \n  or from the selected shown at the top.\n          `}\n          </pre>\n          <h1>About LolCounter</h1>\n\n          <pre style={{fontFamily:'Avenir'}}>{`\n  This is a counter picker web application for League of Legends. \n  It shows the winrates of champions against another champion or a team.\n  \n  It is designed to be a single page app so that you can quickly see the result \n  without having to reload or navigate through many pages\n\n\n          `}\n          </pre>     \n        </div>      \n      </div>\n    )\n  }\n\n  return (\n    <div style={{ float:'left', position:'relative' }}>\n      <div style={{ float:'left', paddingTop:10, paddingLeft:100}}>\n        <ChampionList champions={champions} selectedChampions={selectedChampions} setSelectedChampions={setSelectedChampions}\n          setCurrentWinMap={setCurrentWinMap} currentWinMap={currentWinMap} displayChampions={displayChampions}\n          searchText={searchText} setSearchText={setSearchText} setDisplayChampions={setDisplaysChampions}\n          individualWinMaps={individualWinMaps} setIndividualWinMaps={setIndividualWinMaps}\n        />\n      </div>\n\n      <div style={{float:'left', paddingLeft:70, paddingTop:60}}>\n        <div>\n          <Button variant=\"contained\" color=\"primary\" onClick={clearSelectChampions}\n                style={{width:'auto', height:'auto', whiteSpace:'nowrap', display:'inline-block'}}>\n                Clear All\n            </Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={changeMode}\n                style={{width:'auto', height:'auto', whiteSpace:'nowrap', display:'inline-block',  marginLeft:10}}>\n                  {isTeamCounters ? 'Enable Individal Counters': 'Enable Team Counters'}\n            </Button>\n        </div>\n\n        <div style={{marginTop:10, minWidth:500, maxWidth:500}}>\n          {selectedChampions.length > 0 ? <ChampionNav selectedChampions={selectedChampions} setSelectedChampions={setSelectedChampions} \n              currentWinMap={currentWinMap} setCurrentWinMap={setCurrentWinMap} individualWinMaps={individualWinMaps} \n              setIndividualWinMaps={setIndividualWinMaps} isTeamCounters={isTeamCounters}\n              /> : renderInstructions()}\n        </div>\n        <div style={{minWidth:400, maxWidth:400, marginTop:10}}>\n          {currentWinMap.length > 0 ? renderCounters(): ''}\n        </div>\n      </div>\n    </div>\n  )\n\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}