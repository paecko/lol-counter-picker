{"version":3,"sources":["services/champions.js","services/winRatesService.js","components/Search.js","components/ChampionList.js","components/ChampionNav.js","components/CounterList.js","App.js","index.js"],"names":["axios","get","baseUrl","getAll","a","response","champ","data","Search","searchText","setSearchText","setDisplayChampions","champions","style","borderRadius","height","width","border","backgroundColor","type","value","onChange","event","target","filteredChampions","filter","name","toLowerCase","startsWith","placeholder","ChampionList","displayChampions","selectedChampions","setSelectedChampions","setCurrentWinMap","currentWinMap","updateCurrent","preventDefault","championObject","champion","extractChamp","addChamp","image","championId","length","winRatesService","newChampData","newChampWinMap","winMap","championData","championWinMap","newCurrentWinMap","i","addPercentage","WinRate","championName","oldPercentage","oldTotalPercentage","newPercentage","map","item","concat","selectedChampNames","marginTop","marginLeft","Paper","id","maxHeight","maxWidth","overflow","ImageList","cols","rowHeight","paddingTop","ImageListItem","onSubmit","className","includes","position","textAlign","src","alt","onClick","bottom","left","color","fontWeight","ChampionNav","removeChamp","updatedChamps","removePercentage","row","padding","margin","CounterList","JSON","parse","stringify","selectedChampionsNames","obj","sort","firstObj","secondObj","TableContainer","paddingLeft","paddingRight","component","Table","TableHead","TableRow","TableCell","align","TableBody","scope","float","marginRight","toFixed","Games","App","useState","setChampions","setDisplaysChampions","useEffect","championService","then","document","body","parsedSelectChamps","localStorage","getItem","parsedWinMap","loadSelectChamps","loadWinMap","setItem","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8e99d573.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'https://localhost:3001/api/champions'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nexport default {\n    getAll: getAll\n}","import axios from 'axios'\nconst baseUrl = 'https://localhost:3001/api/statistics'\n\nconst getAll = async () => {\n    const response = await axios.get(baseUrl)\n    return response\n}\n\nconst get = async (champ) => {\n    const response = await axios.get(`${baseUrl}/${champ}`)\n    return response.data\n}\n\nexport default {\n    getAll: getAll,\n    get: get\n}","import React from 'react'\n\nconst Search = ({ searchText, setSearchText, setDisplayChampions, champions }) => {\n\n    const filterChampions = (event) => {\n        setSearchText(event.target.value)\n        if (event.target.value !== '') {\n          const filteredChampions = champions.filter(champ => champ.name.toLowerCase().startsWith(event.target.value.toLowerCase()))\n          setDisplayChampions(filteredChampions)\n        } else {\n          setDisplayChampions(champions)\n        }\n      }\n\n    return (\n        <form>\n            <input style={{borderRadius:1, height:25, width:200, border:'4px solid #06000F', backgroundColor:'#2A1355'}} \n            type='text' value={searchText} onChange={filterChampions} placeholder='Search Champions'></input>\n        </form> \n    )\n}\n\nexport default Search","import React from 'react'\nimport Search from './Search'\nimport winRatesService from '../services/winRatesService'\nimport { Paper, ImageList, ImageListItem } from '@material-ui/core'\nimport '../css/hover.css'\nimport '../css/myClasses.css'\n\nconst ChampionList = ( {champions, displayChampions, selectedChampions, setSelectedChampions, \n  setCurrentWinMap, currentWinMap, searchText, setSearchText, setDisplayChampions} ) => {\n\n  const updateCurrent = async (event) => {\n    event.preventDefault()\n    // looking for clicked champ in all champions state\n    const championObject = champions.filter(champion => champion.name === event.target.value)\n    const extractChamp = championObject[0]\n    // create object for it\n    const addChamp = {name:extractChamp.name, image:extractChamp.image, championId:extractChamp.championId}\n    // checking it hasn't been selected before and adding it to selectedChamps if not.\n    const alreadySelected = selectedChampions.filter(champ => champ.name === addChamp.name)\n    if (alreadySelected.length === 0 && selectedChampions.length < 5) {\n      if(selectedChampions.length === 0){\n        const newChampData = await winRatesService.get(addChamp.name)\n        const newChampWinMap = newChampData[0].winMap\n        setCurrentWinMap(newChampWinMap)\n      } else if(selectedChampions.length > 0) {\n        \n        // get champion that was just added\n        const champion = addChamp\n        let championData = await winRatesService.get(champion.name)\n        let championWinMap = championData[0].winMap\n        let newCurrentWinMap = {}\n\n        for (let i = 0; i < championWinMap.length; i++) {\n          // for champion being added\n          let addPercentage = championWinMap[i].WinRate\n          let name = championWinMap[i].championName\n          // for champions already added before\n          let oldPercentage = currentWinMap[i].WinRate\n          \n          let oldTotalPercentage = oldPercentage * (selectedChampions.length)\n          let newTotalPercentage = oldTotalPercentage + addPercentage\n          let newPercentage = newTotalPercentage / (selectedChampions.length + 1)\n          newCurrentWinMap[name] = newPercentage\n        }\n        setCurrentWinMap(currentWinMap.map(item=>({...item, WinRate:newCurrentWinMap[item.championName]})))\n      }\n      setSelectedChampions(selectedChampions.concat(addChamp))\n    }\n  }\n  const selectedChampNames = selectedChampions.map(champ => champ.name)\n\n  return (\n    <div style={{marginTop:100, marginLeft:100}}>\n        <Search searchText={searchText} setSearchText={setSearchText} setDisplayChampions={setDisplayChampions} \n          champions={champions}/>\n      \n      <Paper id='style-1' style={{ maxHeight: 800, maxWidth: 200, overflow: 'auto',\n        backgroundColor:'#0D0223', borderRadius: 20}}>\n      <ImageList cols={1} rowHeight={100} style={{paddingTop:10}}>  \n        {displayChampions.map(champion =>\n          <ImageListItem key={champion.name}>\n            <form onSubmit={updateCurrent}>\n              <div className={`hvr-grow-shadow ${selectedChampNames.includes(champion.name) ? 'opacitySelectedChamps' : ''}`} \n              style={{position:'relative', textAlign:'center', marginLeft:40 }}>\n                <input type='image' src={process.env.PUBLIC_URL + '/assets/images/' + champion.image} \n                alt={champion.name} value={champion.name} onClick={updateCurrent} />\n                <div style={{ position:'absolute', bottom:24, left:4, color:'white', backgroundColor:'#38423b',\n                    fontWeight:700}}>\n                  {champion.name} \n                </div>\n              </div>\n            </form>\n          </ImageListItem>\n        )}\n      </ImageList>\n    </Paper>\n    </div>\n    \n  )\n}\n\nexport default ChampionList","import View from 'react-flexbox'\nimport React from 'react'\nimport winRatesService from '../services/winRatesService'\n\n\nconst ChampionNav = ( {selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap} ) => {\n\n    const removeChamp = async (event) => {\n      event.preventDefault()\n      const updatedChamps = selectedChampions.filter(champ => champ.name !== event.target.value)\n      if (selectedChampions.length === 1) {\n        setCurrentWinMap([])\n      }\n      else {\n        let championData = await winRatesService.get(event.target.value)\n        let championWinMap = championData[0].winMap\n        let newCurrentWinMap = {}\n  \n        for (let i = 0; i < championWinMap.length; i++) {\n          // for champion being added\n          let removePercentage = championWinMap[i].WinRate\n          let name = championWinMap[i].championName\n          // for champions already added before\n          let oldPercentage = currentWinMap[i].WinRate\n          \n          let oldTotalPercentage = oldPercentage * (selectedChampions.length)\n          let newTotalPercentage = oldTotalPercentage - removePercentage\n          let newPercentage = newTotalPercentage / (selectedChampions.length - 1)\n          newCurrentWinMap[name] = newPercentage\n        }\n        setCurrentWinMap(currentWinMap.map(item=>({...item, WinRate:newCurrentWinMap[item.championName]})))\n      }\n      setSelectedChampions(updatedChamps)\n    }\n  \n    return (\n      <View row style={{ padding:30 }}>\n      {selectedChampions.map(champion =>\n      <div key={champion.name}>\n        <View style={{ margin:15}}>\n            <input type=\"image\" src={process.env.PUBLIC_URL + '/assets/images/' + champion.image}\n            alt={champion.name} onClick={removeChamp} value={champion.name}\n            /> \n        </View>\n      </div>\n      )}\n    </View>\n\n    )\n\n  }\n\nexport default ChampionNav","import React from 'react'\nimport { Paper, ImageList, ImageListItem } from '@material-ui/core'\nimport '../css/hover.css'\nimport '../css/myClasses.css'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst CounterList = ( {currentWinMap, selectedChampions}) => {  \n    //let winMap = currentWinMap\n    //const championsToDisplay = []\n    let winMap = JSON.parse(JSON.stringify(currentWinMap))\n    const selectedChampionsNames = selectedChampions.map(champ => champ.name)\n    winMap = winMap.filter(obj => !selectedChampionsNames.includes(obj.championName))\n    winMap.sort((firstObj, secondObj) => secondObj.WinRate - firstObj.WinRate)\n\n    return (\n        <TableContainer style={{ backgroundColor:'#462D73', paddingLeft:'10%', paddingRight:'10%', overflow:'auto', maxHeight:800}} \n        component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Champion</TableCell>\n              <TableCell align=\"right\">WinRate</TableCell>\n              <TableCell align=\"right\">Games</TableCell>\n\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {winMap.map(champ => (\n              <TableRow key={champ.championName}>\n                <TableCell component=\"th\" scope=\"row\">\n                  <div>\n                   <img style={{ width:'20%', height:'20%', float:'left', marginRight:10 }} \n                  src={process.env.PUBLIC_URL + '/assets/images/' + champ.championName + '.png'}></img>\n                  <p>{champ.championName}</p>\n                  </div>\n\n                </TableCell>\n                <TableCell align=\"right\">{champ.WinRate.toFixed(1)}</TableCell>\n                <TableCell align=\"right\">{champ.Games}</TableCell>\n\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n\n    )\n\n    /**\n     *       <Paper id='style-1' style={{ maxHeight: 800, maxWidth: 200, overflow: 'auto', marginTop:100, marginLeft:100, backgroundColor:'transparent'}}>\n        <ImageList cols={1} rowHeight={150}>\n          {winMap.map(champion =>\n            <div key={champion.championName}>\n              <img src={process.env.PUBLIC_URL + '/assets/images/' + champion.championName + '.png'}></img>\n            </div>\n            )}\n        </ImageList>\n      </Paper>\n     */\n  }\n\nexport default CounterList","import React, { useState, useEffect } from 'react'\nimport championService from './services/champions'\nimport winRatesService from './services/winRatesService'\nimport { Paper, ImageList, ImageListItem } from '@material-ui/core'\nimport './css/hover.css'\nimport './css/myClasses.css'\nimport ChampionList from './components/ChampionList'\nimport ChampionNav from './components/ChampionNav'\nimport CounterList from './components/CounterList'\n\nimport View from 'react-flexbox'\n// following are from : https://riot-api-libraries.readthedocs.io/en/latest/collectingdata.html\n// users: https://canisback.com/leagueId/\n// MATCHIDS: https://canisback.com/matchId/\n//TO DO:\n// allow scrolling of counters while keeping chapion list fixed on side. like on u.gg, slowing showing more counters.\n// add info when there isn't any champions selected in the area where counters are shown.\n// make counter list a table like the tier list on u.gg\n// make server https rather than http\n// redeisgn search box make it bigger. and redesign clear button\n// sort by skill level\n// make it look nicer\n// make it mobile friendly\n// option for using player stats for counter recommandations\n// option for doing combinined counters or individual counters\n// figuring out how to work around counters for a champ at different lanes\n\n/** why does every champion have a number in front of it */\n\nconst App = () => { \n  const [champions, setChampions] = useState([])\n  const [displayChampions, setDisplaysChampions] = useState([])\n  const [searchText, setSearchText] = useState('')\n  const [selectedChampions, setSelectedChampions] = useState([])\n  const [currentWinMap, setCurrentWinMap] = useState([])\n\n  useEffect(() => {\n    championService.getAll().then(response => setChampions(response.data))\n  }, [])\n\n  useEffect(() => {\n    setDisplaysChampions(champions)\n  }, [champions])\n\n  useEffect(() => {\n    document.body.style.backgroundColor = '#18053A'\n  }, [])\n\n  useEffect(() => {\n    const parsedSelectChamps = localStorage.getItem(\"selectedChampions\")\n    const parsedWinMap = localStorage.getItem(\"currentWinMap\")\n\n    if (parsedSelectChamps !== null) {\n      const loadSelectChamps = JSON.parse(parsedSelectChamps)\n      setSelectedChampions(loadSelectChamps)\n    }\n    if (parsedWinMap !== null){\n      const loadWinMap = JSON.parse(parsedWinMap)\n      setCurrentWinMap(loadWinMap)\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(\"selectedChampions\", JSON.stringify(selectedChampions))\n  }, [selectedChampions])\n\n  useEffect(() => {\n    localStorage.setItem(\"currentWinMap\", JSON.stringify(currentWinMap))\n  }, [currentWinMap])\n\n  const clearSelectChampions = () => {\n    setSelectedChampions([])\n    setCurrentWinMap([])\n  }\n\n  return (\n    <div style={{ float:'left', position:'relative'}}>\n      <div style={{ float:'left', paddingTop:0, paddingLeft:100}}>\n        <ChampionList champions={champions} selectedChampions={selectedChampions} setSelectedChampions={setSelectedChampions}\n          setCurrentWinMap={setCurrentWinMap} currentWinMap={currentWinMap} displayChampions={displayChampions}\n          searchText={searchText} setSearchText={setSearchText} setDisplayChampions={setDisplaysChampions}\n        />\n      </div>\n      <div style={{position:'absolute', left:400}}>\n        <div style={{position:'relative', left:50}}>\n        <ChampionNav selectedChampions={selectedChampions} setSelectedChampions={setSelectedChampions} \n          currentWinMap={currentWinMap} setCurrentWinMap={setCurrentWinMap}/>\n        </div>\n\n        <div style={{position:'relative', left:100, width:'75%'}}>\n          {currentWinMap.length > 0 ? <CounterList currentWinMap={currentWinMap} selectedChampions={selectedChampions}/> : ''}\n        </div>\n      </div>\n    </div>\n  )\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}