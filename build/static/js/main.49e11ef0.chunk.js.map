{"version":3,"sources":["services/champions.js","components/Search.js","services/winRatesService.js","components/ChampionNav.js","components/ChampionList.js","components/CounterList.js","App.js","index.js"],"names":["axios","get","Search","searchText","setSearchText","setDisplayChampions","champions","style","borderRadius","height","width","border","backgroundColor","type","value","onChange","event","target","filteredChampions","filter","champ","name","toLowerCase","startsWith","placeholder","baseUrl","getAll","a","response","data","removeChamp","selectedChampions","setSelectedChampions","currentWinMap","setCurrentWinMap","updatedChamps","length","winRatesService","championData","championWinMap","winMap","newCurrentWinMap","i","removePercentage","WinRate","championName","oldPercentage","oldTotalPercentage","newPercentage","Games","map","item","ChampionNav","removeChampNav","preventDefault","row","padding","champion","margin","src","image","alt","onClick","addSelectChampion","championObject","extractChamp","addChamp","championId","newChampData","newChampWinMap","addPercentage","concat","ChampionList","displayChampions","selectedChampNames","updateSelectedChampions","includes","useState","display","setStyle","renderHoverText","champName","info","className","marginTop","marginLeft","Paper","id","maxHeight","maxWidth","overflow","ImageList","cols","rowHeight","paddingTop","position","ImageListItem","onMouseEnter","e","onMouseLeave","onSubmit","textAlign","CounterList","JSON","parse","stringify","selectedChampionsNames","obj","sort","firstObj","secondObj","TableContainer","paddingLeft","paddingRight","minWidth","component","Table","borderCollapse","TableHead","TableRow","TableCell","class","TableBody","index","paddingBottom","scope","float","toFixed","App","setChampions","setDisplaysChampions","useEffect","championService","then","document","body","parsedSelectChamps","localStorage","getItem","parsedWinMap","console","log","loadSelectChamps","loadWinMap","setItem","clearSelectChampions","left","top","Button","variant","color","minHeight","whiteSpace","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.49e11ef0.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/champions'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nexport default {\n    getAll: getAll\n}","import React from 'react'\n\nconst Search = ({ searchText, setSearchText, setDisplayChampions, champions }) => {\n\n    const filterChampions = (event) => {\n        setSearchText(event.target.value)\n        if (event.target.value !== '') {\n          const filteredChampions = champions.filter(champ => champ.name.toLowerCase().startsWith(event.target.value.toLowerCase()))\n          setDisplayChampions(filteredChampions)\n        } else {\n          setDisplayChampions(champions)\n        }\n      }\n\n    return (\n        <form>\n            <input style={{borderRadius:10, height:25, width:200, border:'4px solid #4F485D', backgroundColor:'#2A1355'}} \n            type='text' value={searchText} onChange={filterChampions} placeholder='Search Champions'></input>\n        </form> \n    )\n}\n\nexport default Search","import axios from 'axios'\nconst baseUrl = '/api/statistics'\n\nconst getAll = async () => {\n    const response = await axios.get(baseUrl)\n    return response\n}\n\nconst get = async (champ) => {\n    const response = await axios.get(`${baseUrl}/${champ}`)\n    return response.data\n}\n\nexport default {\n    getAll: getAll,\n    get: get\n}","import View from 'react-flexbox'\nimport React from 'react'\nimport winRatesService from '../services/winRatesService'\n\nconst removeChamp = async (event, selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap) => {\n  const updatedChamps = selectedChampions.filter(champ => champ.name !== event.target.value)\n  if (selectedChampions.length === 1) {\n    setCurrentWinMap([])\n  }\n  else {\n    let championData = await winRatesService.get(event.target.value)\n    let championWinMap = championData[0].winMap\n    let newCurrentWinMap = {}\n\n    for (let i = 0; i < championWinMap.length; i++) {\n      // for champion being added\n      let removePercentage = championWinMap[i].WinRate\n      let name = championWinMap[i].championName\n      // for champions already added before\n      let oldPercentage = currentWinMap[i].WinRate\n      \n      let oldTotalPercentage = oldPercentage * (selectedChampions.length)\n      let newTotalPercentage = oldTotalPercentage - removePercentage\n      let newPercentage = newTotalPercentage / (selectedChampions.length - 1)\n      newCurrentWinMap[name] = {WinRate: newPercentage, Games: championWinMap[i].Games}\n      \n    }\n    setCurrentWinMap(currentWinMap.map(item=>({...item, WinRate: newCurrentWinMap[item.championName]['WinRate'],\n        Games: item.Games - newCurrentWinMap[item.championName]['Games']\n      })))\n  }\n  setSelectedChampions(updatedChamps)\n}\n\n\n\nconst ChampionNav = ( {selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap} ) => {\n  \n    const removeChampNav = (event) => {\n      event.preventDefault()\n      removeChamp(event, selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap)\n    }\n\n    return (\n      <View row style={{ padding:30 }}>\n      {selectedChampions.map(champion =>\n      <div key={champion.name}>\n        <View style={{ margin:15}}>\n            <input width='90' type=\"image\" src={process.env.PUBLIC_URL + '/assets/images/' + champion.image}\n            alt={champion.name} onClick={removeChampNav} value={champion.name}\n            /> \n        </View>\n      </div>\n      )}\n    </View>\n\n    )\n\n  }\n\nexport default ChampionNav\nexport { removeChamp }","import React, {useState} from 'react'\nimport Search from './Search'\nimport winRatesService from '../services/winRatesService'\nimport { Paper, ImageList, ImageListItem } from '@material-ui/core'\nimport { removeChamp } from './ChampionNav'\nimport '../css/hover.css'\nimport '../css/myClasses.css'\n\nconst addSelectChampion = async (event, champions, selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap) => {\n  // looking for clicked champ in all champions state\n  const championObject = champions.filter(champion => champion.name === event.target.value)\n  const extractChamp = championObject[0]\n  // create object for it\n  const addChamp = {name:extractChamp.name, image:extractChamp.image, championId:extractChamp.championId}\n  // checking it hasn't been selected before and adding it to selectedChamps if not.\n  const alreadySelected = selectedChampions.filter(champ => champ.name === addChamp.name)\n\n  if (alreadySelected.length === 0 && selectedChampions.length < 5) {\n    if(selectedChampions.length === 0){\n      const newChampData = await winRatesService.get(addChamp.name)\n      const newChampWinMap = newChampData[0].winMap\n      setCurrentWinMap(newChampWinMap)\n    } else if(selectedChampions.length > 0) {\n      \n      // get champion that was just added\n      const champion = addChamp\n      let championData = await winRatesService.get(champion.name)\n      let championWinMap = championData[0].winMap\n      let newCurrentWinMap = {}\n\n      for (let i = 0; i < championWinMap.length; i++) {\n        // for champion being added\n        let addPercentage = championWinMap[i].WinRate\n        let name = championWinMap[i].championName\n        // for champions already added before\n        let oldPercentage = currentWinMap[i].WinRate\n        \n        let oldTotalPercentage = oldPercentage * (selectedChampions.length)\n        let newTotalPercentage = oldTotalPercentage + addPercentage\n        let newPercentage = newTotalPercentage / (selectedChampions.length + 1)\n        newCurrentWinMap[name] = {WinRate:newPercentage, Games:championWinMap[i].Games}\n      }\n      setCurrentWinMap(currentWinMap.map(item=>({...item, WinRate: newCurrentWinMap[item.championName]['WinRate'], \n        Games: newCurrentWinMap[item.championName]['Games'] + item.Games\n        })))\n    }\n    setSelectedChampions(selectedChampions.concat(addChamp))\n  }\n}\n\n\nconst ChampionList = ( {champions, displayChampions, selectedChampions, setSelectedChampions, \n  setCurrentWinMap, currentWinMap, searchText, setSearchText, setDisplayChampions} ) => {\n  \n  const selectedChampNames = selectedChampions.map(champ => champ.name)\n\n  const updateSelectedChampions = (event) => {\n    event.preventDefault()\n    if (selectedChampNames.includes(event.target.value)) {\n      removeChamp(event, selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap)\n    } else {\n      addSelectChampion(event, champions, selectedChampions, setSelectedChampions, currentWinMap, setCurrentWinMap)\n    }\n  }\n  const [style, setStyle] = useState({style: {display:'none'}, champ:''});\n\n  const renderChampName = (champName) => {\n    return (\n      <div className='championListName' style={style}>\n        {champName}\n      </div>\n    )\n  }\n\n\n\n  const renderHoverText = (champName) => {\n    let info = ''      \n \n    if (selectedChampNames.includes(champName)) {\n      info = 'Remove Enemy'\n    } else {\n      info = 'Add Enemy'\n    }\n\n    return (\n      <div className='championListName' style={style}>\n        {info}\n      </div>\n    )\n  }\n\n  return (\n    <div style={{marginTop:100, marginLeft:100}}>\n        <Search searchText={searchText} setSearchText={setSearchText} setDisplayChampions={setDisplayChampions} \n          champions={champions}/>\n      <Paper id='style-1' style={{ maxHeight: 800, maxWidth:200, overflow: 'auto',\n        backgroundColor:'#130E1F', borderRadius: 20}}>\n      <ImageList cols={1} rowHeight={90} style={{paddingTop:10, position:'center'}}>  \n        {displayChampions.map(champion =>\n          <ImageListItem key={champion.name}                   \n            onMouseEnter={e => {\n            setStyle({style: {display:'block'}, champ:champion.name});\n            }}\n            onMouseLeave={e => {\n            setStyle({style: {display:'none'}, champ:''})\n            }}>\n            <form onSubmit={updateSelectedChampions}>\n\n              <div className={`hvr-grow-shadow ${selectedChampNames.includes(champion.name) ? 'opacitySelectedChamps' : ''}`}\n                id='addEnemy'\n                  style={{position:'relative', textAlign:'center', marginLeft:40 }}\n              >\n                  {style.champ === champion.name ? renderHoverText(champion.name) : renderChampName(champion.name)}\n\n\n                <input type='image' src={process.env.PUBLIC_URL + '/assets/images/' + champion.image} \n                    alt={champion.name} value={champion.name} onClick={updateSelectedChampions}\n                    width='100' height='90'  />\n              \n\n              </div>\n            </form>\n\n          </ImageListItem>\n        )}\n      </ImageList>\n\n    </Paper>\n    </div>\n  )\n  //                {isHovering ? showAddEnemyBox() : showChampionName(champion.name)}\n\n}\n\nexport default ChampionList","import React from 'react'\nimport { Paper, ImageList, ImageListItem } from '@material-ui/core'\nimport '../css/hover.css'\nimport '../css/myClasses.css'\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst CounterList = ( {currentWinMap, selectedChampions}) => {  \n    //let winMap = currentWinMap\n    //const championsToDisplay = []\n    let winMap = JSON.parse(JSON.stringify(currentWinMap))\n    const selectedChampionsNames = selectedChampions.map(champ => champ.name)\n    winMap = winMap.filter(obj => !selectedChampionsNames.includes(obj.championName))\n    // gives loss rate against champs. so our selected champs display champs with lowest winrate. not sure about this tho\n    winMap.map(obj => obj.WinRate = 100 - obj.WinRate)\n    winMap.sort((firstObj, secondObj) => secondObj.WinRate - firstObj.WinRate)\n\n    return (\n      <TableContainer style={{ width:'100%', backgroundColor:'#28252F', paddingLeft:'10%', paddingRight:'10%', overflow:'auto', \n          maxHeight:800, maxWidth:800, minWidth:500, position:'relative', borderRadius:10 }}\n        component={Paper} id='style-1'>\n        <Table style={{borderCollapse:'collapse'}}>\n          <TableHead>\n            <TableRow>\n              <TableCell class='counterListHeaderText'>Champion</TableCell>\n              <TableCell class='counterListHeaderText'>WinRate</TableCell>\n              <TableCell class='counterListHeaderText'>Games</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {winMap.map((champ, index) => (\n              <TableRow key={champ.championName}>\n                <TableCell class='counterListCellText' style={{paddingTop:0.01, paddingBottom:25, paddingLeft:30}} component=\"th\" scope=\"row\">\n                  <div style={{position:'absolute'}}>\n                    <img style={{ width:'30%', height:'20%', float:'left'}} \n                  src={process.env.PUBLIC_URL + '/assets/images/' + champ.championName + '.png'}></img>\n                    <p>{champ.championName}</p>\n                  </div>\n\n                </TableCell>\n                <TableCell class='counterListCellText' style={{textAlign:'center'}}>{champ.WinRate.toFixed(1)}</TableCell>\n                <TableCell class='counterListCellText' style={{textAlign:'center'}}>{champ.Games}</TableCell>\n\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )\n\n    /**\n     *       <Paper id='style-1' style={{ maxHeight: 800, maxWidth: 200, overflow: 'auto', marginTop:100, marginLeft:100, backgroundColor:'transparent'}}>\n        <ImageList cols={1} rowHeight={150}>\n          {winMap.map(champion =>\n            <div key={champion.championName}>\n              <img src={process.env.PUBLIC_URL + '/assets/images/' + champion.championName + '.png'}></img>\n            </div>\n            )}\n        </ImageList>\n      </Paper>\n     */\n  }\n\nexport default CounterList","import React, { useState, useEffect } from 'react'\nimport championService from './services/champions'\nimport { Button } from '@material-ui/core'\nimport './css/hover.css'\nimport './css/myClasses.css'\nimport ChampionList from './components/ChampionList'\nimport ChampionNav from './components/ChampionNav'\nimport CounterList from './components/CounterList'\n\n// following are from : https://riot-api-libraries.readthedocs.io/en/latest/collectingdata.html\n// users: https://canisback.com/leagueId/\n// MATCHIDS: https://canisback.com/matchId/\n//TO DO:\n// u have got the winrate completely opposite. maybe calculate loss rate instead. or u can just do 100 - winrate and sort by that\n// increment games too as champs are added\n// counter list fixed header\n// add sorting options to counter table\n// reduce spacing between counter list items\n// make counter list a table like the tier list on u.gg\n// sort by skill level\n// make it look nicer\n// make it mobile friendly\n// option for using player stats for counter recommandations\n// option for doing combinined counters or individual counters\n// figuring out how to work around counters for a champ at different lanes\n\n/** why does every champion have a number in front of it */\n\nconst App = () => { \n  const [champions, setChampions] = useState([])\n  const [displayChampions, setDisplaysChampions] = useState([])\n  const [searchText, setSearchText] = useState('')\n  const [selectedChampions, setSelectedChampions] = useState([])\n  const [currentWinMap, setCurrentWinMap] = useState([])\n\n  useEffect(() => {\n    championService.getAll().then(response => setChampions(response.data))\n  }, [])\n\n  useEffect(() => {\n    setDisplaysChampions(champions)\n  }, [champions])\n\n  useEffect(() => {\n    // possible new color: 1b1625, 1b1625\n    document.body.style.backgroundColor = '#1b1625'\n  }, [])\n\n  useEffect(() => {\n    const parsedSelectChamps = localStorage.getItem(\"selectedChampions\")\n    const parsedWinMap = localStorage.getItem(\"currentWinMap\")\n    // since its stored as a string and when its empty, its just an empty string as []. \n    if (parsedSelectChamps !== '[]' && parsedSelectChamps) {\n      console.log('loading saved selected champs')\n      const loadSelectChamps = JSON.parse(parsedSelectChamps)\n      setSelectedChampions(loadSelectChamps)\n    }\n    if (parsedWinMap !== '[]' && parsedWinMap) {\n      console.log('loading win map')\n      const loadWinMap = JSON.parse(parsedWinMap)\n      setCurrentWinMap(loadWinMap)\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(\"selectedChampions\", JSON.stringify(selectedChampions))\n  }, [selectedChampions])\n\n  useEffect(() => {\n    localStorage.setItem(\"currentWinMap\", JSON.stringify(currentWinMap))\n  }, [currentWinMap])\n\n  const clearSelectChampions = () => {\n    setSelectedChampions([])\n    setCurrentWinMap([])\n  }\n\n  const renderNavAndCounters = () => {\n    return (\n      <div style={{position:'absolute', left:400, top:50}}>\n        <div style={{position:'relative', left:65}}>\n          <ChampionNav selectedChampions={selectedChampions} setSelectedChampions={setSelectedChampions} \n            currentWinMap={currentWinMap} setCurrentWinMap={setCurrentWinMap}/>\n        </div>\n        <div style={{position:'absolute', left:100, top:150}}>\n          <Button variant=\"contained\" color=\"primary\" onClick={clearSelectChampions}\n              style={{maxWidth:100, minWidth:100, maxHeight:30, minHeight:30, whiteSpace:'nowrap'}}>\n              Clear All\n          </Button>\n        </div>\n\n        <div style={{position:'absolute', left:100, top:200}}>\n          {currentWinMap.length > 0 ? <CounterList currentWinMap={currentWinMap} selectedChampions={selectedChampions}/> : ''}\n        </div>\n      </div>\n    )\n  }\n  \n  const renderInstructions = () => {\n    return (\n      <div style={{position:'absolute'}}>\n        <div style={{color:'white', position:'relative', left:650, top:200, whiteSpace:'nowrap'}}>\n          Choose enemy champions from the list on the left. \n          You can also search for champions.\n        </div>\n        <div style={{color:'white', position:'relative', left:600, top:250}}>\n          <h1>About LolCounter</h1>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div style={{ float:'left', position:'relative' }}>\n      <div style={{ float:'left', paddingTop:0, paddingLeft:100}}>\n        <ChampionList champions={champions} selectedChampions={selectedChampions} setSelectedChampions={setSelectedChampions}\n          setCurrentWinMap={setCurrentWinMap} currentWinMap={currentWinMap} displayChampions={displayChampions}\n          searchText={searchText} setSearchText={setSearchText} setDisplayChampions={setDisplaysChampions}\n        />\n      </div>\n\n      {selectedChampions.length > 0 ? renderNavAndCounters() : renderInstructions()}\n    </div>\n  )\n\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}